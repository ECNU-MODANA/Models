<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int RATE=200; 
// the temperature of environment
//int u=6;
clock u;
clock fff;
//5room and 3heater
const int RN=5; // number of rooms
const int HN=3; // number of heaters
const int scale = 100;
typedef int[1,RN] rid_t;
typedef int[1,HN] hid_t;
broadcast chan on[rid_t],off[rid_t];
broadcast chan move[rid_t]; // leads to zeno runs if marked urgent
//urgent broadcast chan ASAP; // leads to zeno runs if marked urgent

typedef struct {
  int Toff, Ton, Tget, Tlow;
} tempconf_t;

//temperature of room
clock T[rid_t], discomfort, energy, engprice;

bool need[rid_t];
bool cold[rid_t];

// the initial placement of heaters
int h[rid_t]={0,0,0,0,0};
const int h0[rid_t]={1,0,1,0,1};
const rid_t r0[hid_t] = {1, 3, 5}; // heater location in terms of room id
int H[rid_t] = {1,0,2,0,3}; // heater id by room

// people in N rooms
int people[rid_t] = {50,50,50,50,0};
//meeting
int meetingP[rid_t] = {10,5,15,5,0};

rid_t target;

//the vector of the heating capability of a heater in a particular room
//const int cvec[rid_t]={80,60,100};
//const int cvec[rid_t]={80,80,80};
//const int cvec[rid_t]={1000,1200,1300,1100,800}; // heater contribution
const int cvec[rid_t]={900,1100,900,1200,600};
//int bvec[rid_t]={25,10,15,20,40};    // environment contribution
int bvecbase[rid_t]={35,10,15,30,25}; 
double bvec[rid_t]={35.0,10.0,15.0,30.0,25.0};   
int Ton[rid_t] ={19, 19, 19, 19, 19};   // temp to turn on the heater
int Toff[rid_t]={21, 21, 21, 21, 21};    // temp to turn off the heater
int Tget[rid_t] ={16, 17, 18, 17, 16};    // temp at which to get a heater
int Tlow[rid_t]={15, 16, 16, 16, 15};// critical temp lower bound

/*
//with user
int Ton[rid_t] ={5,5,5,5, 5};
int Toff[rid_t]={7,7,7,7,7};
int Tlow[rid_t]={4, 4, 4,4,4};
*/

//difference in temperature at which to get the heater
const int dif[rid_t]={1,1,1,1,1};
// matrix of exchange coefficients??
//const int Amat[3][3]={{0,8,6},{8,0,7},{6,7,0}};
//const int Amat[rid_t][rid_t]={{0,30,0,50,0},{30,0,20,0,20},{0,20,0,30,50},{0,0,30,0,40},{50,20,50,40,0}};
const int Amat[rid_t][rid_t]={{0,30,0,50,60},{30,0,20,0,20},{0,20,0,30,50},{50,0,30,0,0},{60,20,50,0,0}};
const int T0[rid_t] = { 18, 18, 18, 18, 18 }; //initial room temp

// when turnoff , the change of the temperature decreasing
// time units in hours:
const int day = 24;
const int year = 365*day;
const int month = year/12;
//const int LATENCY=1/60; // 1/60=0 !!
clock PI;

/**
* Danish last decade weather averages:
* http://www.dmi.dk/dmi/index/danmark/klimanormaler/vejrnormaler.htm
*/
// monthly average curve:
const int year_avg = 88;      //  +8.8C
const int month_avg_min = 12; //  +1.2C
const int month_avg_max = 174;// +17.4C
const int month_offset = 86*month/10;  //  +8.6 months in hours

// monthly day average deviation from average:
const int day_dev_avg = 31; // 3.1C
const int day_dev_min = 18; // 1.8C
const int day_dev_max = 42; // 4.2C
const int day_offset = 97*month/10;  // +9.7 months in hours

// monthly night average deviation from average:
const int night_dev_avg = -33; // -3.3C
const int night_dev_min = -40; // -4.0C
const int night_dev_max = -23; // -2.3C
const int night_offset = 35*month/10;   // +3.5 months in hours

const int hour_offset = -9; // at 9:00 is the middle day temp

/*const tempconf_t tday[rid_t] = {
{ 20, 17, 18, 15 },
{ 20, 17, 17, 16 },
{ 20, 17, 16, 15 },
{ 20, 17, 17, 16 },
{ 20, 17, 18, 16 }
};*/
tempconf_t tday[rid_t] = {
{ 23, 18, 18, 17 },
{ 23, 18, 17, 16 },
{ 23, 18, 18, 17 },
{ 23, 18, 17, 16 },
{ 23, 18, 18, 17 }
};
const tempconf_t tnight[rid_t] = {
{ 10, 8, 6, 5 },
{ 10, 8, 6, 5 },
{ 10, 8, 6, 5 },
{ 10, 8, 6, 5 },
{ 10, 8, 6, 5 }
};

typedef int[16,22] onRange_t;
typedef int[16,22] getRange_t;
</declaration>
	<template>
		<name>Room</name>
		<parameter>const rid_t id</parameter>
		<declaration>clock dt,r; // temporary clock
double e = 2.71828;
void cool()
{
   r = bvec[id]*(u+-T[id]) * 1.0/scale;
   for(j:rid_t)
      r = r + Amat[id][j]*(T[j]+ -T[id]) * 1.0/scale;
   T[id] = T[id] + r * dt;
   dt = 0;
}

//when turnon, the change of temperature increaing
void heat()
{
   r = (cvec[id]*h[id] + bvec[id]*(u+-T[id])) *1.0/scale;
   for(j:rid_t)
     r = r + Amat[id][j]*(T[j]+ -T[id]) * 1.0/scale;
   T[id] = T[id] + r * dt;
   dt = 0;
}
double peopleImpact(){
    double g = ((T[id]-14.03)/17.41);
    double f = 0.09862*pow(e,-g*g)*people[id];
    return 0.09862*pow(e,-g*g)*people[id];
}
</declaration>
		<location id="id0" x="722" y="527">
			<urgent/>
		</location>
		<location id="id1" x="722" y="647">
			<label kind="invariant" x="552" y="671">T[id]' == (cvec[id]*h[id] + bvec[id]*(u+-T[id]) 
+ sum(j:rid_t)(Amat[id][j]*(T[j]+ -T[id]))+peopleImpact())/scale</label>
			<label kind="exponentialrate" x="697" y="655">30</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="799" y="604">cold[id] &amp;&amp;
T[id] &gt;= Tlow[id]</label>
			<label kind="assignment" x="799" y="646">cold[id]=false</label>
			<nail x="786" y="607"/>
			<nail x="786" y="647"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="799" y="519">need[id] &amp;&amp;
T[id] &gt; Tget[id]</label>
			<label kind="assignment" x="799" y="561">need[id]=false</label>
			<nail x="786" y="567"/>
			<nail x="786" y="519"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="552" y="484">!need[id] &amp;&amp;
H[id]==0 &amp;&amp; 
T[id]&lt;=Tget[id]</label>
			<label kind="assignment" x="561" y="552">need[id]=true</label>
			<nail x="650" y="567"/>
			<nail x="650" y="519"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="552" y="595">!cold[id] &amp;&amp;
T[id] &lt; Tlow[id]</label>
			<label kind="assignment" x="561" y="637">cold[id]=true</label>
			<nail x="658" y="607"/>
			<nail x="658" y="647"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="688" y="544">T[id]=T0[id]</label>
		</transition>
	</template>
	<template>
		<name>Heater</name>
		<parameter>const hid_t id</parameter>
		<declaration>rid_t r = r0[id];
clock c; // for each heater, the energy consumption
</declaration>
		<location id="id2" x="-431" y="-91">
			<committed/>
		</location>
		<location id="id3" x="-351" y="-195">
			<name x="-343" y="-187">On</name>
			<label kind="invariant" x="-343" y="-153">c'==5</label>
			<label kind="exponentialrate" x="-343" y="-170">60</label>
		</location>
		<location id="id4" x="-527" y="-195">
			<name x="-555" y="-187">Off</name>
			<label kind="invariant" x="-564" y="-153">c'==0</label>
			<label kind="exponentialrate" x="-555" y="-170">60</label>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-513" y="-127">off[r]!</label>
			<label kind="assignment" x="-513" y="-110">h[r]=0,
r=target</label>
			<nail x="-527" y="-91"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-411" y="-110">move[r]?</label>
			<nail x="-351" y="-91"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-598" y="-254">move[r]?</label>
			<label kind="assignment" x="-598" y="-237">r=target</label>
			<nail x="-530" y="-246"/>
			<nail x="-572" y="-195"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-479" y="-179">T[r]&gt;=Toff[r]</label>
			<label kind="synchronisation" x="-462" y="-161">off[r]!</label>
			<label kind="assignment" x="-462" y="-144">h[r]=0</label>
			<nail x="-383" y="-163"/>
			<nail x="-487" y="-163"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-479" y="-251">T[r]&lt;=Ton[r]</label>
			<label kind="synchronisation" x="-462" y="-229">on[r]!</label>
			<label kind="assignment" x="-462" y="-212">h[r]=1</label>
			<nail x="-487" y="-227"/>
			<nail x="-383" y="-227"/>
		</transition>
	</template>
	<template>
		<name>ControlOriginal</name>
		<declaration>int importance[rid_t]={ 1, 30, 2, 3, 4};</declaration>
		<location id="id5" x="-756" y="-221">
			<name x="-794" y="-229">idle</name>
			<label kind="exponentialrate" x="-794" y="-212">100</label>
		</location>
		<location id="id6" x="-412" y="-221">
			<name x="-396" y="-237">choosing</name>
			<label kind="exponentialrate" x="-396" y="-221">100</label>
		</location>
		<branchpoint id="id7" x="-565" y="-221">
		</branchpoint>
		<init ref="id5"/>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-658" y="-297">!need[target] || H[target]&gt;0</label>
			<nail x="-420" y="-271"/>
			<nail x="-752" y="-271"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-539" y="-253">i:rid_t</label>
			<label kind="assignment" x="-539" y="-237">target=i</label>
			<label kind="probability" x="-539" y="-221">importance[i]*
(H[i]==0)*need[i]</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="select" x="-718" y="-254">i:rid_t, j:rid_t</label>
			<label kind="guard" x="-735" y="-237">need[i] &amp;&amp; H[i]==0 &amp;&amp;
H[j]&gt;0 &amp;&amp; T[j]-T[i]&gt;=dif[i]</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="select" x="-692" y="-195">j:rid_t</label>
			<label kind="guard" x="-692" y="-178">need[target] &amp;&amp; H[target]==0 &amp;&amp;
H[j]&gt;0 &amp;&amp; T[j]-T[target]&gt;=dif[target]</label>
			<label kind="synchronisation" x="-692" y="-144">move[j]!</label>
			<label kind="assignment" x="-692" y="-127">H[target]=H[j], H[j]=0</label>
			<nail x="-420" y="-156"/>
			<nail x="-752" y="-156"/>
		</transition>
	</template>
	<template>
		<name>ControlGet</name>
		<declaration>int importance[rid_t]={ 1, 30, 2, 3, 4};</declaration>
		<location id="id8" x="-344" y="8">
			<name x="-392" y="0">idle</name>
			<label kind="exponentialrate" x="-392" y="16">100</label>
		</location>
		<location id="id9" x="0" y="8">
			<name x="16" y="-8">choosing</name>
			<label kind="exponentialrate" x="16" y="8">100</label>
		</location>
		<branchpoint id="id10" x="-144" y="8">
		</branchpoint>
		<init ref="id8"/>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-320" y="-72">!need[target] || H[target]&gt;0</label>
			<nail x="0" y="-48"/>
			<nail x="-344" y="-48"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="select" x="-128" y="-24">i:rid_t</label>
			<label kind="assignment" x="-128" y="-8">target=i</label>
			<label kind="probability" x="-128" y="8">importance[i]*
(H[i]==0)*need[i]</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="select" x="-320" y="-32">i:rid_t, j:rid_t</label>
			<label kind="guard" x="-320" y="-8">need[i] &amp;&amp; H[i]==0 &amp;&amp;
H[j]&gt;0 &amp;&amp; T[j]&gt;=Tget[j]</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="select" x="-320" y="48">j:rid_t</label>
			<label kind="guard" x="-320" y="64">need[target] &amp;&amp; H[target]==0 &amp;&amp;
H[j]&gt;0 &amp;&amp; T[j]&gt;=Tget[j]</label>
			<label kind="synchronisation" x="-320" y="104">move[j]!</label>
			<label kind="assignment" x="-320" y="120">H[target]=H[j], H[j]=0</label>
			<nail x="0" y="104"/>
			<nail x="-344" y="104"/>
		</transition>
	</template>
	<template>
		<name>ControlTon</name>
		<declaration>int importance[rid_t]={ 1, 30, 2, 3, 4};</declaration>
		<location id="id11" x="-340" y="8">
			<name x="-378" y="-8">idle</name>
			<label kind="exponentialrate" x="-378" y="8">100</label>
		</location>
		<location id="id12" x="-8" y="8">
			<name x="8" y="-8">choosing</name>
			<label kind="exponentialrate" x="8" y="8">100</label>
		</location>
		<branchpoint id="id13" x="-161" y="8">
		</branchpoint>
		<init ref="id11"/>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="guard" x="-263" y="-59">!need[target] || H[target]&gt;0</label>
			<nail x="-8" y="-34"/>
			<nail x="-340" y="-34"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="select" x="-144" y="-17">i:rid_t</label>
			<label kind="assignment" x="-85" y="-17">target=i</label>
			<label kind="probability" x="-144" y="8">importance[i]*
(H[i]==0)*need[i]</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id13"/>
			<label kind="select" x="-306" y="-17">i:rid_t, j:rid_t</label>
			<label kind="guard" x="-323" y="8">need[i] &amp;&amp; H[i]==0 &amp;&amp;
H[j]&gt;0 &amp;&amp; T[j]&gt;=Ton[j]</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="select" x="-289" y="68">j:rid_t</label>
			<label kind="guard" x="-238" y="93">need[target] &amp;&amp; H[target]==0 &amp;&amp;
H[j]&gt;0 &amp;&amp; T[j]&gt;=Ton[j]</label>
			<label kind="synchronisation" x="-306" y="93">move[j]!</label>
			<label kind="assignment" x="-204" y="68">H[target]=H[j], H[j]=0</label>
			<nail x="-8" y="93"/>
			<nail x="-340" y="93"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">WeatherFlat</name>
		<parameter>clock &amp;T</parameter>
		<location id="id14" x="-568" y="-144">
			<urgent/>
		</location>
		<location id="id15" x="-568" y="-56">
			<label kind="invariant" x="-584" y="-40">T'==0</label>
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="assignment" x="-632" y="-120">T=-2.0*1</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">WeatherRapid</name>
		<parameter>clock &amp;T</parameter>
		<declaration>clock PI, t;</declaration>
		<location id="id16" x="-568" y="-72">
			<label kind="invariant" x="-576" y="-40">T'==0 &amp;&amp;
PI'==0</label>
			<label kind="exponentialrate" x="-576" y="-56">60 // ~1/minute</label>
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id16"/>
			<target ref="id16"/>
			<label kind="assignment" x="-552" y="-128">PI=3.14159265,
T=-1+1.0*sin(t*2*PI)</label>
			<nail x="-568" y="-112"/>
			<nail x="-480" y="-112"/>
			<nail x="-480" y="-72"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">WeatherDaily</name>
		<parameter>clock &amp;T</parameter>
		<declaration>clock PI, t, A, B;

void update() {
    PI=3.14159265;
    T = -1.0 + 1.0*sin((t+hour_offset)*2*PI/day);
}

</declaration>
		<location id="id17" x="-910" y="-153">
			<committed/>
		</location>
		<location id="id18" x="-782" y="-153">
			<label kind="invariant" x="-782" y="-129">T'==0 &amp;&amp;
PI'==0 &amp;&amp;
A'==0 &amp;&amp;
B'==0</label>
			<label kind="exponentialrate" x="-782" y="-145">60 // ~1/minute</label>
		</location>
		<init ref="id17"/>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="assignment" x="-910" y="-145">A=random(2),
B=random(1)</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id18"/>
			<label kind="assignment" x="-782" y="-209">PI=3.14159265,
T=A*sin((t+hour_offset)*2*PI/day)-B</label>
			<nail x="-782" y="-193"/>
			<nail x="-694" y="-193"/>
			<nail x="-694" y="-153"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">WeatherComplex</name>
		<parameter>clock &amp;T, clock &amp;cyclon</parameter>
		<declaration>const int scale_deg = 10; // scale for degree constants
clock t, avg, day_dev, night_dev;

void update() {
    avg = year_avg + (month_avg_max-month_avg_min)*sin((t+month_offset)*2*PI/year)/2;
    day_dev = day_dev_avg + (day_dev_max-day_dev_min)*sin((t+day_offset)*2*PI/year)/2;
    night_dev = night_dev_avg + (night_dev_max-night_dev_min)*sin((t+night_offset)*2*PI/year)/2;
    T = (avg + (day_dev+ -night_dev)/2*sin((t+hour_offset)*2*PI/day)) / scale_deg + cyclon*1;
}

</declaration>
		<location id="id19" x="-568" y="-72">
			<label kind="invariant" x="-584" y="-40">T'==0</label>
			<label kind="exponentialrate" x="-584" y="-56">60 // roughly once every minute</label>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="assignment" x="-552" y="-128">update()</label>
			<nail x="-568" y="-112"/>
			<nail x="-480" y="-112"/>
			<nail x="-480" y="-72"/>
		</transition>
	</template>
	<template>
		<name>WeatherReal</name>
		<parameter>clock &amp;T</parameter>
		<declaration>clock  t;
double e,Gauss1,Gauss2,Gauss3;
void update() {
    e = 2.71828;
    Gauss1 = -((t-23.16)/ 11.58)*((t-23.16)/ 11.58);
    Gauss2 = -((t-14.24)/ 6.194)*((t-14.24)/ 6.194);
    Gauss3 = -((t+1.212)/ 5.069)*((t+1.212)/ 5.069);
    T = 3.868*pow(e,Gauss1)+8.556*pow(e,Gauss2)+6.057*pow(e,Gauss3);
}

</declaration>
		<location id="id20" x="-1410" y="-1431">
			<label kind="invariant" x="-1426" y="-1399">T'==0</label>
			<label kind="exponentialrate" x="-1426" y="-1415">60 // roughly once every minute</label>
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id20"/>
			<target ref="id20"/>
			<label kind="assignment" x="-1394" y="-1487">update()</label>
			<nail x="-1410" y="-1471"/>
			<nail x="-1322" y="-1471"/>
			<nail x="-1322" y="-1431"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Cyclon</name>
		<parameter>clock &amp;cyclon_a</parameter>
		<declaration>int shift;
clock period, cyclon_b;</declaration>
		<location id="id21" x="-736" y="-72">
			<committed/>
		</location>
		<location id="id22" x="-544" y="-72">
			<name x="-560" y="-56">L</name>
			<label kind="invariant" x="-560" y="-40">PI'==0 &amp;&amp; 
period'==shift &amp;&amp;
cyclon_a'==2*PI*cyclon_b/period &amp;&amp;
cyclon_b'==-2*PI*cyclon_a/period</label>
			<label kind="exponentialrate" x="-528" y="-64">1</label>
		</location>
		<branchpoint id="id23" x="-544" y="-184">
		</branchpoint>
		<init ref="id21"/>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="assignment" x="-528" y="-200">shift=-1</label>
			<label kind="probability" x="-528" y="-184">1</label>
			<nail x="-472" y="-184"/>
			<nail x="-472" y="-144"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="assignment" x="-608" y="-200">shift=1</label>
			<label kind="probability" x="-608" y="-184">1</label>
			<nail x="-616" y="-184"/>
			<nail x="-616" y="-144"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="guard" x="-592" y="-152">period&gt;=2*day &amp;&amp;
period&lt;=6*day</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id22"/>
			<label kind="guard" x="-440" y="-128">period&gt;6*day</label>
			<label kind="assignment" x="-440" y="-112">shift=-2</label>
			<nail x="-456" y="-120"/>
			<nail x="-440" y="-96"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id22"/>
			<label kind="guard" x="-728" y="-128">period&lt;2*day</label>
			<label kind="assignment" x="-728" y="-112">shift=2</label>
			<nail x="-656" y="-96"/>
			<nail x="-640" y="-128"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="assignment" x="-720" y="-72">PI=3.14159265,
shift=1,
period=1.0*year/100,
cyclon_a=0,
cyclon_b=1</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">WeatherNotWorking</name>
		<parameter>clock &amp;T</parameter>
		<declaration>// this weather model is not working due to absence of algebraic function support
int scale_deg = 10; // scale for degree constants
clock t, cyclonp, period;
int shift;


/*
clock t, avg, day_dev, night_dev;

void update() {
    avg = year_avg + (month_avg_max-month_avg_min)*sin((t+month_offset)*2*PI/year)/2;
    day_dev = day_dev_avg + (day_dev_max-day_dev_min)*sin((t+day_offset)*2*PI/year)/2;
    night_dev = night_dev_avg + (night_dev_max-night_dev_min)*sin((t+night_offset)*2*PI/year)/2;
    T = (avg + (day_dev+ -night_dev)/2*sin((t+hour_offset)*2*PI/day)) / scale_deg + cyclon*1;
}

*/</declaration>
		<location id="id24" x="-568" y="192">
			<urgent/>
		</location>
		<location id="id25" x="-568" y="-72">
			<name x="-584" y="-64">L</name>
			<label kind="invariant" x="-624" y="-24">PI'==0 &amp;&amp;
cyclonp'==shift &amp;&amp;
T'== (year_avg + (month_avg_max-month_avg_min)*cos((t)*2*PI/year)/2
          + (day_dev_avg + (day_dev_max-day_dev_min)*cos((t)*2*PI/year)/2+ 
               -night_dev_avg + (night_dev_max-night_dev_min)*cos((t)*2*PI/year)/2)/2*cos((t)*2*PI/day)) / scale_deg 
         + 1*cos(t*2*PI/cyclonp)</label>
			<label kind="exponentialrate" x="-616" y="-48">60 // roughly once every minute</label>
		</location>
		<branchpoint id="id26" x="-568" y="-224">
		</branchpoint>
		<init ref="id24"/>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="assignment" x="-728" y="80">PI=3.1412659,
cyclonp=365.0/100,
T= (year_avg + (month_avg_max-month_avg_min)*sin((month_offset)*2*PI/year)/2
          + (day_dev_avg +    (day_dev_max-day_dev_min)*sin((day_offset)*2*PI/year)/2+ 
              -night_dev_avg + (night_dev_max-night_dev_min)*sin((night_offset)*2*PI/year)/2)/2*sin((hour_offset)*2*PI/day)) / scale_deg</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id25"/>
			<label kind="guard" x="-728" y="-200">period&lt;=2*day</label>
			<label kind="assignment" x="-728" y="-184">shift=1</label>
			<nail x="-704" y="-112"/>
			<nail x="-704" y="-200"/>
			<nail x="-640" y="-200"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id25"/>
			<label kind="guard" x="-488" y="-184">period&gt;=6*day</label>
			<label kind="assignment" x="-488" y="-168">shift=-1</label>
			<nail x="-440" y="-96"/>
			<nail x="-440" y="-184"/>
			<nail x="-512" y="-184"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="assignment" x="-472" y="-240">shift=-1</label>
			<label kind="probability" x="-544" y="-248">1</label>
			<nail x="-376" y="-224"/>
			<nail x="-376" y="-80"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="assignment" x="-720" y="-240">shift=1</label>
			<label kind="probability" x="-600" y="-248">1</label>
			<nail x="-728" y="-224"/>
			<nail x="-728" y="-96"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="guard" x="-600" y="-208">period&gt;2*day &amp;&amp;
period&lt;6*day</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Weather</name>
		<parameter>clock &amp;T</parameter>
		<declaration>clock PI, t;

void update() {
    PI=3.14159265;
    T = 2.0 + 2.0*sin((t+hour_offset)*2*PI/day);
}

</declaration>
		<location id="id27" x="-680" y="-93">
			<label kind="invariant" x="-697" y="-51">T'==0 &amp;&amp;
PI'==0</label>
			<label kind="exponentialrate" x="-697" y="-76">60 // roughly once every minute</label>
		</location>
		<init ref="id27"/>
		<transition>
			<source ref="id27"/>
			<target ref="id27"/>
			<label kind="assignment" x="-620" y="-144">PI=3.14159265,
T = 2.0 + 2.0*sin((t+hour_offset)*2*PI/day)</label>
			<nail x="-680" y="-161"/>
			<nail x="-629" y="-161"/>
			<nail x="-629" y="-93"/>
		</transition>
	</template>
	<template>
		<name>FlatProfile</name>
		<parameter>const rid_t id</parameter>
		<location id="id28" x="-424" y="-32">
			<urgent/>
		</location>
		<location id="id29" x="-224" y="-32">
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="assignment" x="-408" y="-32">Toff[id]=tday[id].Toff,
Ton[id]=tday[id].Ton,
Tget[id]=tday[id].Tget,
Tlow[id]=tday[id].Tlow</label>
		</transition>
	</template>
	<template>
		<name>UserProfile</name>
		<parameter>const rid_t id</parameter>
		<declaration>clock t, x;
void controlUpdate1() {
        Toff[id]=tnight[id].Toff;
        Ton[id]=tnight[id].Ton;
        Tget[id]=tnight[id].Tget;
        Tlow[id]=tnight[id].Tlow;
        people[id] = 0;
}

void controlUpdate2() {
    if(id!=5){
        Toff[id]=tday[id].Toff;
        Ton[id]=tday[id].Ton;
        Tget[id]=tday[id].Tget;
    }
}
void controlUpdate3() {
    if(id!=5){
        Tlow[id]=tday[id].Tlow;
        people[id]+=50;
    }
}</declaration>
		<location id="id30" x="-1487" y="-459">
			<name x="-1589" y="-459">morningWork</name>
			<label kind="invariant" x="-1504" y="-442">x&lt;=3</label>
		</location>
		<location id="id31" x="-1666" y="-731">
			<urgent/>
		</location>
		<location id="id32" x="-1666" y="-459">
			<name x="-1714" y="-483">arrive</name>
			<label kind="invariant" x="-1683" y="-450">t&lt;=9</label>
		</location>
		<location id="id33" x="-1088" y="-612">
			<name x="-1104" y="-660">leave</name>
			<label kind="invariant" x="-1104" y="-644">t&lt;=24</label>
		</location>
		<location id="id34" x="-1088" y="-459">
			<name x="-1071" y="-459">afternoonWork</name>
			<label kind="invariant" x="-1112" y="-443">x&lt;=3</label>
		</location>
		<location id="id35" x="-1292" y="-459">
			<name x="-1317" y="-493">lunchTime</name>
			<label kind="invariant" x="-1300" y="-442">x&lt;=1</label>
		</location>
		<location id="id36" x="-1666" y="-612">
			<name x="-1722" y="-628">absent</name>
			<label kind="invariant" x="-1722" y="-612">t&lt;=5</label>
		</location>
		<init ref="id31"/>
		<transition>
			<source ref="id30"/>
			<target ref="id35"/>
			<label kind="guard" x="-1453" y="-459">x==3</label>
			<label kind="assignment" x="-1453" y="-442">x = 0,people[id]=0</label>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id34"/>
			<label kind="guard" x="-1258" y="-476">x ==1</label>
			<label kind="assignment" x="-1258" y="-459">x = 0,people[id]=50</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id36"/>
			<label kind="assignment" x="-1666" y="-671">controlUpdate1()</label>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id32"/>
			<label kind="guard" x="-1657" y="-586">t==5</label>
			<label kind="assignment" x="-1657" y="-535">controlUpdate2()</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id36"/>
			<label kind="guard" x="-1333" y="-627">t==24</label>
			<label kind="assignment" x="-1325" y="-603">t=0</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="guard" x="-1079" y="-561">x ==3</label>
			<label kind="assignment" x="-1079" y="-535">controlUpdate1(),people[id]=0</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id30"/>
			<label kind="guard" x="-1683" y="-433">t&gt;=8</label>
			<label kind="assignment" x="-1657" y="-493">controlUpdate3(),x = 0</label>
		</transition>
	</template>
	<template>
		<name>UserProfile2</name>
		<parameter>const rid_t id</parameter>
		<declaration>clock t, x;
void controlUpdate1() {
        Toff[id]=tnight[id].Toff;
        Ton[id]=tnight[id].Ton;
        Tget[id]=tnight[id].Tget;
        Tlow[id]=tnight[id].Tlow;
        people[id] = 0;
}

void controlUpdate2() {
    if(id!=5){
        Toff[id]=tday[id].Toff;
        Ton[id]=tday[id].Ton;
        Tget[id]=tday[id].Tget;
    }
}
void controlUpdate3() {
    if(id!=5){
        Tlow[id]=tday[id].Tlow;
        people[id]+=50;
    }
}</declaration>
		<location id="id37" x="-1436" y="-459">
			<name x="-1538" y="-459">morningWork</name>
			<label kind="invariant" x="-1453" y="-442">x&lt;=3</label>
		</location>
		<location id="id38" x="-1615" y="-731">
			<urgent/>
		</location>
		<location id="id39" x="-1615" y="-459">
			<name x="-1663" y="-483">arrive</name>
			<label kind="invariant" x="-1632" y="-450">t&lt;=9</label>
		</location>
		<location id="id40" x="-1037" y="-612">
			<name x="-1053" y="-660">leave</name>
			<label kind="invariant" x="-1053" y="-644">t&lt;=24</label>
		</location>
		<location id="id41" x="-1037" y="-459">
			<name x="-1020" y="-459">afternoonWork</name>
			<label kind="invariant" x="-1061" y="-443">x&lt;=3</label>
		</location>
		<location id="id42" x="-1241" y="-459">
			<name x="-1266" y="-493">lunchTime</name>
			<label kind="invariant" x="-1249" y="-442">x&lt;=1</label>
		</location>
		<location id="id43" x="-1615" y="-612">
			<name x="-1671" y="-628">absent</name>
			<label kind="invariant" x="-1671" y="-612">t&lt;=5</label>
		</location>
		<init ref="id38"/>
		<transition>
			<source ref="id37"/>
			<target ref="id42"/>
			<label kind="guard" x="-1402" y="-459">x==3</label>
			<label kind="assignment" x="-1402" y="-442">x = 0,people[id]=0</label>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id41"/>
			<label kind="guard" x="-1207" y="-476">x ==1</label>
			<label kind="assignment" x="-1207" y="-459">x = 0,people[id]=50</label>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id43"/>
			<label kind="assignment" x="-1615" y="-671">controlUpdate1()</label>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id39"/>
			<label kind="guard" x="-1606" y="-586">t==5</label>
			<label kind="assignment" x="-1606" y="-535">controlUpdate2()</label>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id43"/>
			<label kind="guard" x="-1282" y="-627">t==24</label>
			<label kind="assignment" x="-1274" y="-603">t=0</label>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id40"/>
			<label kind="guard" x="-1028" y="-561">x ==3</label>
			<label kind="assignment" x="-1028" y="-535">controlUpdate1(),people[id]=0</label>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id37"/>
			<label kind="guard" x="-1632" y="-433">t==9</label>
			<label kind="assignment" x="-1606" y="-493">controlUpdate3(),x = 0</label>
		</transition>
	</template>
	<template>
		<name>Price</name>
		<declaration>clock t;</declaration>
		<location id="id44" x="-1530" y="-663">
			<urgent/>
		</location>
		<location id="id45" x="-1530" y="-425">
			<name x="-1598" y="-442">morning</name>
			<label kind="invariant" x="-1581" y="-416">t&lt;=10&amp;&amp;engprice'==
(sum(i:hid_t) 5*h[i])*3</label>
		</location>
		<location id="id46" x="-1113" y="-569">
			<name x="-1147" y="-612">leave</name>
			<label kind="invariant" x="-1105" y="-612">t&lt;=24&amp;&amp;engprice'==
(sum(i:hid_t) 5*h[i])*3</label>
		</location>
		<location id="id47" x="-1113" y="-425">
			<name x="-1096" y="-433">nig</name>
			<label kind="invariant" x="-1137" y="-409">t&lt;=14&amp;&amp;engprice'==
(sum(i:hid_t) 5*h[i])*20</label>
		</location>
		<location id="id48" x="-1309" y="-425">
			<name x="-1334" y="-459">afternoon</name>
			<label kind="invariant" x="-1317" y="-408">t&lt;=12&amp;&amp;engprice'==
(sum(i:hid_t) 5*h[i])*20</label>
		</location>
		<location id="id49" x="-1530" y="-569">
			<name x="-1586" y="-585">absent</name>
			<label kind="invariant" x="-1521" y="-629">t&lt;=5&amp;&amp;engprice'==
(sum(i:hid_t) 5*h[i])*3</label>
		</location>
		<init ref="id44"/>
		<transition>
			<source ref="id45"/>
			<target ref="id48"/>
			<label kind="guard" x="-1521" y="-450">t==10</label>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id47"/>
			<label kind="guard" x="-1292" y="-442">t ==12</label>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id49"/>
		</transition>
		<transition>
			<source ref="id49"/>
			<target ref="id45"/>
			<label kind="guard" x="-1521" y="-561">t==5</label>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id49"/>
			<label kind="guard" x="-1173" y="-586">t==24</label>
			<label kind="assignment" x="-1283" y="-586">t=0</label>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="guard" x="-1164" y="-450">t == 14</label>
		</transition>
	</template>
	<template>
		<name>MultiUserProfile</name>
		<parameter>const rid_t id</parameter>
		<declaration>clock t, x;
double e,Gauss1,Gauss2,Gauss3,Gauss4,Gauss5,Gauss6,Gauss7,Gauss; 
void userUpdate(){
    e = 2.71828;
    x = t - 7;
    Gauss1 = -((x-9.084)/ 1.95)*((x-9.084)/ 1.95);
    Gauss2 = -((x-3.631)/ 1.246)*((x-3.631)/ 1.246);
    Gauss3 = -((x-4.743)/ 0.5913)*((x-4.743)/ 0.5913);
    Gauss4 = -((x-6.301)/ 0.6582)*((x-6.301)/ 0.6582);
    Gauss5 = -((x-1.984)/ 1.018)*((x-1.984)/ 1.018);
    Gauss6 = -((x-7.158)/ 1.116)*((x-7.158)/ 1.116);
    Gauss7 = -((x-12.03)/ 3.321)*((x-12.03)/ 3.321);
    Gauss = 636.2*pow(e,Gauss1)+686.4*pow(e,Gauss2)+366.4*pow(e,Gauss3)+329*pow(e,Gauss4)+539.2*pow(e,Gauss5)+409.5*pow(e,Gauss6)+150.9*pow(e,Gauss7);
    bvec[id] = bvecbase[id]+0.01*Gauss;
}

void controlUpdate1() {
    Toff[id]=tnight[id].Toff;
    Ton[id]=tnight[id].Ton;
    Tget[id]=tnight[id].Tget;
    Tlow[id]=tnight[id].Tlow;
}

void controlUpdate2() {
    Toff[id]=tday[id].Toff;
    Ton[id]=tday[id].Ton;
    Tget[id]=tday[id].Tget;
}

void controlUpdate3() {
    Tlow[id]=tday[id].Tlow;
}</declaration>
		<location id="id50" x="-722" y="-281">
			<urgent/>
		</location>
		<location id="id51" x="-637" y="-187">
			<name x="-685" y="-211">arrive</name>
			<label kind="invariant" x="-654" y="-170">t&lt;=9</label>
		</location>
		<location id="id52" x="-314" y="-281">
			<name x="-297" y="-298">leave</name>
			<label kind="invariant" x="-331" y="-315">t&lt;=24</label>
		</location>
		<location id="id53" x="-314" y="-187">
			<name x="-382" y="-221">afternoon</name>
			<label kind="invariant" x="-305" y="-213">t&lt;=22</label>
		</location>
		<location id="id54" x="-458" y="-187">
			<name x="-490" y="-219">morning</name>
			<label kind="invariant" x="-475" y="-170">t&lt;=13</label>
		</location>
		<location id="id55" x="-637" y="-281">
			<name x="-628" y="-306">absent</name>
			<label kind="invariant" x="-671" y="-272">t&lt;=5</label>
		</location>
		<init ref="id50"/>
		<transition>
			<source ref="id54"/>
			<target ref="id53"/>
			<label kind="guard" x="-407" y="-187">t&gt;=12</label>
			<label kind="assignment" x="-424" y="-170">userUpdate()</label>
		</transition>
		<transition>
			<source ref="id50"/>
			<target ref="id55"/>
			<label kind="assignment" x="-764" y="-315">controlUpdate1()</label>
		</transition>
		<transition>
			<source ref="id55"/>
			<target ref="id51"/>
			<label kind="guard" x="-671" y="-238">t==5</label>
			<label kind="assignment" x="-628" y="-238">controlUpdate2()</label>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id55"/>
			<label kind="guard" x="-399" y="-298">t==24</label>
			<label kind="assignment" x="-390" y="-281">t=0</label>
		</transition>
		<transition>
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="guard" x="-305" y="-247">t==22</label>
			<label kind="assignment" x="-424" y="-247">controlUpdate1()</label>
		</transition>
		<transition>
			<source ref="id51"/>
			<target ref="id54"/>
			<label kind="guard" x="-569" y="-187">t&gt;=7</label>
			<label kind="assignment" x="-612" y="-170">controlUpdate3(),
   userUpdate()</label>
		</transition>
	</template>
	<template>
		<name>ProbUserProfile</name>
		<parameter>const rid_t id</parameter>
		<declaration>clock t,x;
void controlUpdate1() {
        Toff[id]=tnight[id].Toff;
        Ton[id]=tnight[id].Ton;
        Tget[id]=tnight[id].Tget;
        Tlow[id]=tnight[id].Tlow;
        people[id] = 0;
}

void controlUpdate2() {
    if(id!=5){
        Toff[id]=tday[id].Toff;
        Ton[id]=tday[id].Ton;
        Tget[id]=tday[id].Tget;
        Tlow[id]=tday[id].Tlow;
    }
}
void controlUpdate3() {
    if(id!=5){
        Tlow[id]=tday[id].Tlow;
        people[id]+=50;
    }
}</declaration>
		<location id="id56" x="-153" y="0">
			<name x="-187" y="-34">lunchTime</name>
			<label kind="invariant" x="-170" y="17">x&lt;=1</label>
		</location>
		<location id="id57" x="-501" y="-263">
			<urgent/>
		</location>
		<location id="id58" x="-501" y="0">
			<name x="-549" y="-24">arrive</name>
			<label kind="invariant" x="-517" y="16">t&lt;=9</label>
		</location>
		<location id="id59" x="-357" y="-178">
			<name x="-373" y="-226">leave</name>
			<label kind="invariant" x="-373" y="-210">t&lt;=24</label>
		</location>
		<location id="id60" x="8" y="-178">
			<name x="-34" y="-229">afternoon</name>
			<label kind="invariant" x="-8" y="-212">x&lt;=4</label>
		</location>
		<location id="id61" x="-314" y="0">
			<name x="-365" y="-34">morningWork</name>
			<label kind="invariant" x="-331" y="17">x&lt;=4</label>
		</location>
		<location id="id62" x="-501" y="-178">
			<name x="-552" y="-204">absent</name>
			<label kind="invariant" x="-544" y="-178">t&lt;=5</label>
		</location>
		<branchpoint id="id63" x="8" y="0">
		</branchpoint>
		<init ref="id57"/>
		<transition>
			<source ref="id63"/>
			<target ref="id59"/>
			<label kind="assignment" x="-178" y="-136">controlUpdate1(),
people[id]=0</label>
			<label kind="probability" x="-195" y="-93">8</label>
		</transition>
		<transition>
			<source ref="id63"/>
			<target ref="id60"/>
			<label kind="probability" x="-8" y="-102">2</label>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id63"/>
			<label kind="guard" x="-93" y="-25">x==1</label>
			<label kind="assignment" x="-127" y="0">people[id]=50,x=0</label>
		</transition>
		<transition>
			<source ref="id61"/>
			<target ref="id56"/>
			<label kind="guard" x="-255" y="-25">x==4</label>
			<label kind="assignment" x="-289" y="0">x=0,people[id]=0</label>
		</transition>
		<transition>
			<source ref="id57"/>
			<target ref="id62"/>
			<label kind="assignment" x="-493" y="-246">controlUpdate1()</label>
		</transition>
		<transition>
			<source ref="id62"/>
			<target ref="id58"/>
			<label kind="guard" x="-493" y="-136">t==5</label>
			<label kind="assignment" x="-501" y="-110">controlUpdate2()</label>
		</transition>
		<transition>
			<source ref="id59"/>
			<target ref="id62"/>
			<label kind="guard" x="-467" y="-178">t==24</label>
			<label kind="assignment" x="-425" y="-195">t=0</label>
		</transition>
		<transition>
			<source ref="id60"/>
			<target ref="id59"/>
			<label kind="guard" x="-246" y="-178">x==4</label>
			<label kind="assignment" x="-306" y="-204">controlUpdate1(),people[id]=0</label>
		</transition>
		<transition>
			<source ref="id58"/>
			<target ref="id61"/>
			<label kind="guard" x="-518" y="34">t&gt;=8</label>
			<label kind="assignment" x="-476" y="0">controlUpdate3(),x=0</label>
		</transition>
	</template>
	<template>
		<name>ConferenceUserProfile</name>
		<parameter>const rid_t id</parameter>
		<declaration>clock t, x;
void controlUpdate1() {
        Toff[id]=tnight[id].Toff;
        Ton[id]=tnight[id].Ton;
        Tget[id]=tnight[id].Tget;
        Tlow[id]=tnight[id].Tlow;
        people[id] = 0;
}

void controlUpdate2() {
    if(id!=5){
        Toff[id]=tday[id].Toff;
        Ton[id]=tday[id].Ton;
        Tget[id]=tday[id].Tget;
    }
}

void controlUpdate3() {
    Tlow[id]=tday[id].Tlow;
}
void meetingS() {
    if(id!=5){
        people[id] -= meetingP[id];
        people[5] += meetingP[id];
    }
    
}
void meetingC() {
        if(id!=5){
            people[id]+=meetingP[id];
        }else{
            Toff[5]=tnight[5].Toff;
            Ton[5]=tnight[5].Ton;
            Tget[5]=tnight[5].Tget;
            Tlow[5]=tnight[5].Tlow;
        }
}
void controlUpdate4() {
    if(id!=5){
        Tlow[id]=tday[id].Tlow;
        people[id]+=50;
    }
}
void peopleCome() {
      if(id!=5){

    }
}</declaration>
		<location id="id64" x="-153" y="8">
			<name x="-263" y="0">afternoonWork</name>
			<label kind="invariant" x="-136" y="-1">x&lt;=3</label>
		</location>
		<location id="id65" x="-416" y="93">
			<name x="-426" y="59">morning</name>
			<urgent/>
		</location>
		<location id="id66" x="-263" y="204">
			<name x="-238" y="195">morningWork</name>
			<label kind="invariant" x="-273" y="221">x&lt;=3</label>
		</location>
		<location id="id67" x="-153" y="-110">
			<name x="-280" y="-110">afternoonMeeting</name>
			<label kind="invariant" x="-136" y="-119">x&lt;=1</label>
		</location>
		<location id="id68" x="-416" y="204">
			<name x="-493" y="195">morningMeeting</name>
			<label kind="invariant" x="-426" y="221">x&lt;=1</label>
		</location>
		<location id="id69" x="-773" y="-195">
			<urgent/>
		</location>
		<location id="id70" x="-603" y="93">
			<name x="-651" y="69">arrive</name>
			<label kind="invariant" x="-620" y="110">t&lt;=9</label>
		</location>
		<location id="id71" x="-153" y="-195">
			<name x="-136" y="-212">leave</name>
			<label kind="invariant" x="-170" y="-229">t&lt;=24</label>
		</location>
		<location id="id72" x="-153" y="93">
			<name x="-136" y="85">afternoon</name>
			<urgent/>
		</location>
		<location id="id73" x="-263" y="93">
			<name x="-280" y="51">lunch</name>
			<label kind="invariant" x="-314" y="85">x&lt;=1</label>
		</location>
		<location id="id74" x="-603" y="-195">
			<name x="-594" y="-220">absent</name>
			<label kind="invariant" x="-637" y="-186">t&lt;=5</label>
		</location>
		<init ref="id69"/>
		<transition>
			<source ref="id67"/>
			<target ref="id71"/>
			<label kind="guard" x="-136" y="-178">x==1</label>
			<label kind="assignment" x="-136" y="-161">controlUpdate1(),people[id] = 0</label>
		</transition>
		<transition>
			<source ref="id64"/>
			<target ref="id67"/>
			<label kind="guard" x="-136" y="-85">x==3</label>
			<label kind="assignment" x="-136" y="-68">x = 0,
meetingS()</label>
		</transition>
		<transition>
			<source ref="id65"/>
			<target ref="id68"/>
			<label kind="assignment" x="-527" y="136">meetingS(),
x = 0</label>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id73"/>
			<label kind="guard" x="-255" y="127">x==3</label>
			<label kind="assignment" x="-255" y="144">x = 0</label>
			<nail x="-263" y="187"/>
		</transition>
		<transition>
			<source ref="id68"/>
			<target ref="id66"/>
			<label kind="guard" x="-374" y="221">x==1</label>
			<label kind="assignment" x="-374" y="238">x = 0,
meetingC()</label>
		</transition>
		<transition>
			<source ref="id73"/>
			<target ref="id72"/>
			<label kind="guard" x="-229" y="93">x==1</label>
		</transition>
		<transition>
			<source ref="id69"/>
			<target ref="id74"/>
			<label kind="assignment" x="-739" y="-221">controlUpdate1()</label>
		</transition>
		<transition>
			<source ref="id74"/>
			<target ref="id70"/>
			<label kind="guard" x="-595" y="-17">t==5</label>
			<label kind="assignment" x="-595" y="-42">controlUpdate2()</label>
		</transition>
		<transition>
			<source ref="id71"/>
			<target ref="id74"/>
			<label kind="guard" x="-433" y="-187">t==24</label>
			<label kind="assignment" x="-433" y="-170">t=0</label>
		</transition>
		<transition>
			<source ref="id72"/>
			<target ref="id64"/>
			<label kind="assignment" x="-161" y="34">x = 0</label>
		</transition>
		<transition>
			<source ref="id70"/>
			<target ref="id65"/>
			<label kind="guard" x="-535" y="76">t&gt;=8</label>
			<label kind="assignment" x="-569" y="93">controlUpdate4()</label>
		</transition>
	</template>
	<template>
		<name>Global</name>
		<declaration>
void setOnGet(int i, int j){
    for(r:rid_t) {
        tday[r].Ton=i;
        tday[r].Tget=j;
    }
}</declaration>
		<location id="id75" x="0" y="-200">
			<committed/>
		</location>
		<location id="id76" x="0" y="-96">
			<label kind="invariant" x="-68" y="-76">energy'==(sum(i:hid_t) 5*h[i]) &amp;&amp;
discomfort'==(sum(i:rid_t) cold[i])</label>
		</location>
		<branchpoint id="id77" x="0" y="-160">
		</branchpoint>
		<init ref="id75"/>
		<transition>
			<source ref="id77"/>
			<target ref="id76"/>
			<label kind="select" x="8" y="-160">i: onRange_t,
j: getRange_t</label>
			<label kind="assignment" x="8" y="-128">setOnGet(i,j)</label>
			<label kind="probability" x="-16" y="-128">1</label>
		</transition>
		<transition>
			<source ref="id75"/>
			<target ref="id77"/>
		</transition>
	</template>
	<system>clock time;
clock c;
//weather=WeatherRapid(u);
//weather=WeatherDaily(u);
weather=WeatherReal(u);
//cyclon=Cyclon(c);
//weather=Weather(u);
//user(const rid_t i)=ConferenceUserProfile(i);
//user(const rid_t i)=ProbUserProfile(i);
//user(const rid_t i)=UserProfile(i);
//user(const rid_t i)=FlatProfile(i);
user(const rid_t i)=UserProfile2(i);

//system Room,Heater,ControlOriginal, weather, user, Global;
system Room,Heater,ControlGet, weather, user, Global,Price;
//system Room,Heater, ControlTon, weather, user, Global;
system>
	<queries>
		<query>
			<formula>Pr[&lt;=48](&lt;&gt; T[1]&gt;31 &amp;&amp; T[2]&lt;4 )
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=48] {T[1],T[2],T[3],T[4],T[5],bvec[1],bvec[2],bvec[3],bvec[4],bvec[5],Heater(1).c,Heater(2).c,Heater(3).c,u,discomfort,ControlGet.idle,ControlGet.choosing,user(1).absent,user(1).arrive,user(1).morning,user(1).afternoon,user(1).leave,user(2).absent,user(2).arrive,user(2).morning,user(2).afternoon,user(2).leave,user(3).absent,user(3).arrive,user(3).morning,user(3).afternoon,user(3).leave,user(4).absent,user(4).arrive,user(4).morning,user(4).afternoon,user(4).leave,user(5).absent,user(5).arrive,user(5).morning,user(5).afternoon,user(5).leave,Heater(1).Off,Heater(1).On,Heater(2).Off,Heater(2).On,Heater(3).Off,Heater(3).On,need[1],need[2],need[3],need[4],need[5],cold[1],cold[2],cold[3],cold[4],cold[5]}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=48](&lt;&gt; energy &gt;=170 &amp;&amp; T[2]&lt;8)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=48](&lt;&gt; energy&gt;=210 &amp;&amp;discomfort&lt;=15)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[energy&lt;=1000000](&lt;&gt; time&gt;=48)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[energy&lt;=1000000](&lt;&gt; time&gt;=48)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[energy&lt;=1000000](&lt;&gt; time&gt;=48)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=48](&lt;&gt; energy&gt;=210)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[discomfort&lt;=48] (&lt;&gt; time&gt;=48)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1[&lt;=24] {engprice}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1[&lt;=24] {engprice}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 10 [&lt;=48] {discomfort}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 5 [&lt;=5*24] {energy}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 5 [&lt;=5*24] {energy}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 5 [&lt;=24] {energy}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 10 [&lt;=5*24] {energy}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=100] {T[1],T[2],T[3],T[4],T[5]}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=24] {u}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=48] {ControlGet.idle,ControlGet.choosing}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=48] {Heater(1).Off,Heater(1).On,Heater(2).Off,Heater(2).On,Heater(3).Off,Heater(3).On}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=48] {user(1).absent,user(1).arrive,user(1).morning,user(1).afternoon,user(1).leave,
                                  user(2).absent,user(2).arrive,user(2).morning,user(2).afternoon,user(2).leave,
                                  user(3).absent,user(3).arrive,user(3).morning,user(3).afternoon,user(3).leave,
                                  user(4).absent,user(4).arrive,user(4).morning,user(4).afternoon,user(4).leave,
                                  user(5).absent,user(5).arrive,user(5).morning,user(5).afternoon,user(5).leave}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=48] {
T[1],T[2],T[3],T[4],T[5],
bvec[1],bvec[2],bvec[3],bvec[4],bvec[5],
Heater(1).c,Heater(2).c,Heater(3).c,
u,discomfort,PI,
ControlGet.idle,ControlGet.choosing,
user(1).absent,user(1).arrive,user(1).morning,user(1).afternoon,user(1).leave,
user(2).absent,user(2).arrive,user(2).morning,user(2).afternoon,user(2).leave,
user(3).absent,user(3).arrive,user(3).morning,user(3).afternoon,user(3).leave,
user(4).absent,user(4).arrive,user(4).morning,user(4).afternoon,user(4).leave,
user(5).absent,user(5).arrive,user(5).morning,user(5).afternoon,user(5).leave,
Heater(1).Off,Heater(1).On,Heater(2).Off,Heater(2).On,Heater(3).Off,Heater(3).On,
need[1],need[2],need[3],need[4],need[5],
cold[1],cold[2],cold[3],cold[4],cold[5]}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=48] {T[1],T[2],T[3],T[4],T[5],need[1],need[2],need[3],need[4],need[5],cold[1],cold[2],cold[3],cold[4],cold[5],bvec[1],bvec[2],bvec[3],bvec[4],bvec[5],Heater(1).c,Heater(2).c,Heater(3).c,Heater(1).Off,Heater(1).On,Heater(2).Off,Heater(2).On,Heater(3).Off,Heater(3).On,u,discomfort,PI,ControlGet.idle,ControlGet.choosing,user(1).absent,user(1).arrive,user(1).morning,user(1).afternoon,user(1).leave,
                                  user(2).absent,user(2).arrive,user(2).morning,user(2).afternoon,user(2).leave,
                                  user(3).absent,user(3).arrive,user(3).morning,user(3).afternoon,user(3).leave,
                                  user(4).absent,user(4).arrive,user(4).morning,user(4).afternoon,user(4).leave,
                                  user(5).absent,user(5).arrive,user(5).morning,user(5).afternoon,user(5).leave}
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
